{
  "_from": "password-validator",
  "_id": "password-validator@4.1.1",
  "_inBundle": false,
  "_integrity": "sha1-gPNDV5g0tXSRMJeXP2ayNH7Yqvk=",
  "_location": "/password-validator",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "password-validator",
    "fetchSpec": "latest",
    "name": "password-validator",
    "raw": "password-validator",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/password-validator/-/password-validator-4.1.1.tgz",
  "_shasum": "80f343579834b574913097973f66b2347ed8aaf9",
  "_shrinkwrap": null,
  "_spec": "password-validator",
  "_where": "H:\\Mongo\\Project\\App\\AppProject",
  "author": {
    "email": "tarun.batra00@gmail.com",
    "name": "Tarun Batra"
  },
  "bugs": {
    "url": "https://github.com/tarunbatra/password-validator/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Validates password according to flexible and intuitive specifications",
  "devDependencies": {
    "chai": "^3.5.0",
    "docdash": "^0.4.0",
    "eslint": "^1.10.3",
    "jsdoc": "^3.4.3",
    "mocha": "^2.4.5"
  },
  "homepage": "https://github.com/tarunbatra/password-validator#readme",
  "keywords": [
    "check",
    "match",
    "password",
    "rules",
    "schema",
    "validation",
    "validator"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "name": "password-validator",
  "optionalDependencies": {},
  "readme": "[![logo][logo-image]][logo-url]\n\n[![build status][travis-image]][travis-url]\n[![npm version][npm-image]][npm-url]\n[![npm downloads][downloads-image]][npm-url]\n\n## Install\n`npm install password-validator`\n\n## Usage\n```js\nvar passwordValidator = require('password-validator');\n\n// Create a schema\nvar schema = new passwordValidator();\n\n// Add properties to it\nschema\n.is().min(8)                                    // Minimum length 8\n.is().max(100)                                  // Maximum length 100\n.has().uppercase()                              // Must have uppercase letters\n.has().lowercase()                              // Must have lowercase letters\n.has().digits()                                 // Must have digits\n.has().not().spaces()                           // Should not have spaces\n.is().not().oneOf(['Passw0rd', 'Password123']); // Blacklist these values\n\n// Validate against a password string\nconsole.log(schema.validate('validPASS123'));\n// => true\nconsole.log(schema.validate('invalidPASS'));\n// => false\n\n// Get a full list of rules which failed\nconsole.log(schema.validate('joke', { list: true }));\n// => [ 'min', 'uppercase', 'digits' ]\n\n```\n\n## Rules\nRules supported as of now are:\n\n|     Rules      |               Descriptions                                       |\n|:---------------|:-----------------------------------------------------------------|\n|**digits()**    | specifies password must include digits                           |\n|**letters()**   | specifies password must include letters                          |\n|**lowercase()** | specifies password must include lowercase letters                |\n|**uppercase()** | specifies password must include uppercase letters                |\n|**symbols()**   | specifies password must include symbols                          |\n|**spaces()**    | specifies password must include spaces                           |\n|**min(len)**    | specifies minimum length                                         |\n|**max(len)**    | specifies maximum length                                         |\n|**oneOf(list)** | specifies the whitelisted values                                 |\n|**not([regex])**| inverts the result of validations applied next                   |\n|**is()**        | inverts the effect of _**not()**_                                |\n|**has([regex])**| inverts the effect of _**not()**_ and applies a regex (optional) |\n\n## Options\nThe following options can be passed to `validate` method:\n* `list` - If set, validate method returns a list of rules which failed instead of true/false.\n\n## Resources\n* API Reference\n  - [latest](https://tarunbatra.github.io/password-validator)\n  - [others](https://github.com/tarunbatra/password-validator/wiki/API-Reference)\n* [Wiki](https://github.com/tarunbatra/password-validator/wiki)\n* [Changelog](https://github.com/tarunbatra/password-validator/blob/master/CHANGELOG.md)\n\nFor APIs of other older versions, head to Wiki.\n\n## License\n[MIT License](http://choosealicense.com/licenses/mit/)\n\n\n[logo-image]: http://res.cloudinary.com/tbking/image/upload/v1490803400/password-validator/logo.png\n[logo-url]: http://tarunbatra.github.io/password-validator\n[npm-image]: https://img.shields.io/npm/v/password-validator.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/password-validator\n[travis-image]:https://img.shields.io/travis/tarunbatra/password-validator.svg?style=flat-square\n[travis-url]:https://travis-ci.org/tarunbatra/password-validator\n[downloads-image]: https://img.shields.io/npm/dt/password-validator.svg?style=flat-square\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tarunbatra/password-validator.git"
  },
  "scripts": {
    "docs": "jsdoc ./src/*.js ./package.json -t ./node_modules/docdash -R README.md -d ./docs -r",
    "lint": "eslint ./src",
    "start": "node index.js",
    "test": "npm run lint && npm run test:unit",
    "test:unit": "mocha tests/*.js"
  },
  "version": "4.1.1"
}
