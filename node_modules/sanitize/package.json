{
  "_from": "sanitize",
  "_id": "sanitize@2.1.0",
  "_inBundle": false,
  "_integrity": "sha512-HLDVriFJnrm6ElDe2E8alAKDMZGMtM8CdKhvunp9592j8hNwZmmsmhk/t6WZbWonKJsHK0OoxH5S1Yoie4sSpw==",
  "_location": "/sanitize",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "sanitize",
    "fetchSpec": "latest",
    "name": "sanitize",
    "raw": "sanitize",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/sanitize/-/sanitize-2.1.0.tgz",
  "_shasum": "0fb0c4b3756c35e2d2f9324d954a5b35d1dde0bd",
  "_shrinkwrap": null,
  "_spec": "sanitize",
  "_where": "H:\\Mongo\\Project\\App\\AppProject",
  "author": {
    "email": "ajaso@pocketly.com",
    "name": "Adam Jaso"
  },
  "bugs": {
    "url": "https://github.com/pocketly/node-sanitize/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "lodash": "^4.17.0",
    "validator": "^3.33.0"
  },
  "deprecated": false,
  "description": "Input sanitizing library for node.js",
  "devDependencies": {
    "mocha": "^2.1.0",
    "should": "^4.6.0"
  },
  "homepage": "https://github.com/pocketly/node-sanitize",
  "keywords": [
    "input filtering",
    "sanitization",
    "user input"
  ],
  "license": "ISC",
  "main": "lib/sanitize.js",
  "name": "sanitize",
  "optionalDependencies": {},
  "publishConfig": {
    "registry": "https://registry.npmjs.org"
  },
  "readme": "# node-sanitize\nInput sanitizing library for node.js\n\n# Summary\nThis library is for the purpose of sanitizing user input. The examples below show some of the built in sanitizers. You can create your own custom sanitizers. Please refer to the tests for more examples of how to use this library.\n\n# Install\n\n```bash\nnpm install --save sanitize\n```\n\n# Test\n\n```bash\nnpm test\n```\n\n# Usage\n\n```javascript\nvar express = require('express');\nvar app = express();\napp.use(require('sanitize').middleware);\napp.get('/ping', function(req, res) {\n\tvar param = req.queryInt('param');\n\tres.send('pong ' + (typeof param) + ' ' + param);\n});\napp.listen(8080);\n```\n\n# Documentation\n\n## Sanitize Objects\n\n### sanitize.primitives(obj: PlainObject): PlainObject\nThis will remove all keys from a plain object that are not `String`, `Integer`, or `Boolean`. It's great for sanitizing objects before inserting into the database.\n\n## Express Middleware\n\n### req.headerInt(headerName: String): Integer\n### req.headerString(headerName: String): String\n### req.headerFloat(headerName: String): Float\n### req.headerEmail(headerName: String): String\n### req.headerPattern(headerName: String, pattern: RegExp): String\n### req.headerOneOf(headerName: String, arr: Array): String\n\n### req.bodyInt(bodyParam: String): Integer\n### req.bodyString(bodyParam: String): String\n### req.bodyFloat(bodyParam: String): Float\n### req.bodyEmail(bodyParam: String): String\n### req.bodyPattern(bodyParam: String, pattern: RegExp): String\n### req.boydOneOf(bodyName: String, arr: Array): String\n\n### req.queryInt(queryParam: String): Integer\n### req.queryString(queryParam: String): String\n### req.queryFloat(queryParam: String): Float\n### req.queryEmail(queryParam: String): String\n### req.queryPattern(queryParam: String, pattern: RegExp): String\n### req.queryOneOf(queryName: String, arr: Array): String\n\n### req.paramInt(paramName: String): Integer\n### req.paramString(paramName: String): String\n### req.paramFloat(paramName: String): Float\n### req.paramEmail(paramName: String): String\n### req.paramPattern(paramName: String, pattern: RegExp): String\n### req.paramOneOf(paramName: String, arr: Array): String",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pocketly/node-sanitize.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "2.1.0"
}
